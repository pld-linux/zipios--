--- zipios++-0.1.5/src/deflateoutputstreambuf.cpp.orig	Fri Aug 25 21:03:42 2000
+++ zipios++-0.1.5/src/deflateoutputstreambuf.cpp	Mon Mar 17 00:45:17 2003
@@ -8,6 +8,8 @@
 #include "zipios++/fcollexceptions.h"
 #include "zipios++/deflateoutputstreambuf.h"
 
+#include "outputstringstream.h"
+
 namespace zipios {
 
 using std::cerr ;
--- zipios++-0.1.5/src/directory.h.orig	Fri Aug  4 15:26:00 2000
+++ zipios++-0.1.5/src/directory.h	Mon Mar 17 00:25:35 2003
@@ -89,7 +89,7 @@
 			
 			class proxy
 			{
-				friend dir_it;
+				friend class dir_it;
 				proxy(std::string const &ent): entry(ent) {}
 			public:
 				std::string operator*() const { return entry; }
@@ -305,19 +305,20 @@
 		struct uid { typedef uid_t value_type; };
 		template<> uid_t get<uid>(dir_it const &);
 		template<> void set<uid>(dir_it const &, uid_t);
-		class unknown_uname: public invalid_argument
+		class unknown_uname: public std::invalid_argument
 		{
 		public:
-			unknown_uname(string u): std::invalid_argument("unknown user name"), m_uname(u) {}
-			string uname() const { return m_uname; }
+			unknown_uname(std::string u): std::invalid_argument("unknown user name"), m_uname(u) {}
+			std::string uname() const { return m_uname; }
+			~unknown_uname() throw() {}
 		private:
-			string m_uname;
+			std::string m_uname;
 		};
-		struct uname { typedef string value_type; };
-		template<> string get<uname>(dir_it const &);
-		template<> void set<uname>(dir_it const &, string );
+		struct uname { typedef std::string value_type; };
+		template<> std::string get<uname>(dir_it const &);
+		template<> void set<uname>(dir_it const &, std::string );
 
-		class unknown_gid: public invalid_argument
+		class unknown_gid: public std::invalid_argument
 		{
 		public:
 			unknown_gid(gid_t g): std::invalid_argument("unknown group ID"), m_gid(g) {}
@@ -328,17 +329,18 @@
 		struct gid { typedef gid_t value_type; };
 		template<> gid_t get<gid>(dir_it const &);
 		template<> void set<gid>(dir_it const &, gid_t);
-		class unknown_gname: public invalid_argument
+		class unknown_gname: public std::invalid_argument
 		{
 		public:
-			unknown_gname(string g): std::invalid_argument("unknown group name"), m_gname(g) {}
-			string gname() const { return m_gname; }
+			unknown_gname(std::string g): std::invalid_argument("unknown group name"), m_gname(g) {}
+			std::string gname() const { return m_gname; }
+			~unknown_gname() throw() {}
 		private:
-			string m_gname;
+			std::string m_gname;
 		};
-		struct gname { typedef string value_type; };
-		template<> string get<gname>(dir_it const &);
-		template<> void set<gname>(dir_it const &, string );
+		struct gname { typedef std::string value_type; };
+		template<> std::string get<gname>(dir_it const &);
+		template<> void set<gname>(dir_it const &, std::string );
 
 #endif
 
--- zipios++-0.1.5/zipios++/fileentry.h.orig	Wed Aug 23 20:30:30 2000
+++ zipios++-0.1.5/zipios++/fileentry.h	Sun Mar 16 23:14:06 2003
@@ -166,8 +166,8 @@
   class MatchName ;
   class MatchFileName ;
 protected:
-  friend SimpleSmartPointer< FileEntry > ;
-  friend SimpleSmartPointer< const FileEntry > ;
+  friend class SimpleSmartPointer< FileEntry > ;
+  friend class SimpleSmartPointer< const FileEntry > ;
   void           ref() const { _refcount.ref() ;          }
   unsigned int unref() const { return _refcount.unref() ; }
 
--- zipios++-0.1.5/zipios++/simplesmartptr.h.orig	Sun Jul 15 21:42:34 2001
+++ zipios++-0.1.5/zipios++/simplesmartptr.h	Sun Mar 16 23:13:12 2003
@@ -97,15 +97,6 @@
     ReferenceCount variable. */
 template< class Type >
 class ReferenceCount {
-  /** SimpleSmartPointer needs to be a friend to invoke the private
-      ref() and unref() methods.  */
-  friend SimpleSmartPointer< Type > ;
-  friend SimpleSmartPointer< const Type > ;
-  /** Type also needs to be a friend to invoke the private ref() and
-      unref() methods, in case Type doesn't want to inherit
-      ReferenceCount and thus needs to invoke ref() and unref()
-      through forwarding member functions. */
-  friend Type ;
 public:
   /** Constructor intializes count to zero. */
   ReferenceCount() : _ref_count( 0 ) {}
@@ -117,16 +108,16 @@
   /** The assignment operator doesn't copy the reference count, it
       leaves it unchanged.  */
   const ReferenceCount &operator= ( const ReferenceCount &src ) {}
-private:
 
   /** Increases the reference count. */
   void ref() const           { ++_ref_count ;        }
 
   /** Decreases the reference count. */
   unsigned int unref() const { return --_ref_count ; }
 
   /** Returns the reference count - For debugging purposes. */
   unsigned int getReferenceCount() const { return _ref_count; }
+private:
 
   /** Holds the actual reference count */
   mutable unsigned short _ref_count ;
--- zipios++-0.1.5/tests/test_simplesmartptr.cpp.orig	Sun Jul 15 21:51:14 2001
+++ zipios++-0.1.5/tests/test_simplesmartptr.cpp	Mon Mar 17 02:30:31 2003
@@ -26,8 +26,8 @@
   Bogus(bool &isAlive) : _isAlive(isAlive) {}
   ~Bogus() { _isAlive = false; }
 protected:
-  friend SimpleSmartPointer< Bogus > ;
-  friend SimpleSmartPointer< const Bogus > ;
+  friend class SimpleSmartPointer< Bogus > ;
+  friend class SimpleSmartPointer< const Bogus > ;
 
   void           ref() const { _refcount.ref() ;          }
   unsigned int unref() const { return _refcount.unref() ; }
